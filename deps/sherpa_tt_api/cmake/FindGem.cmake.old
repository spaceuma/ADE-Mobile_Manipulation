# Author thomas.roehr@dfki.de
#
# Version 0.2 2010-01-14
#       - add support for searching for multiple gems
# Version 0.1 2010-12-15
# 	- support basic search functionality 
#       - tested to find rice
#
# OUTPUT:
#
# GEM_INCLUDE_DIRS	After successful search contains the include directores
#
# GEM_LIBRARIES		After successful search contains the full path of each found library
#
#
# Usage: 
# set(Gem_DEBUG TRUE)
# find_package(Gem COMPONENTS rice hoe)
# include_directories(${GEM_INCLUDE_DIRS})
# target_link_libraries(${GEM_LIBRARIES}
#
# in case pkg-config should be used to search for the os pkg, set GEM_OS_PKG
# set(GEM_OS_PKG TRUE)
#
# Check for how 'gem' should be called
find_program(GEM_EXECUTABLE
    NAMES "gem${RUBY_VERSION_MAJOR}${RUBY_VERSION_MINOR}"
        "gem${RUBY_VERSION_MAJOR}.${RUBY_VERSION_MINOR}"
        "gem-${RUBY_VERSION_MAJOR}${RUBY_VERSION_MINOR}"
        "gem-${RUBY_VERSION_MAJOR}.${RUBY_VERSION_MINOR}"
        "gem${RUBY_VERSION_MAJOR}${RUBY_VERSION_MINOR}${RUBY_VERSION_PATCH}"
        "gem${RUBY_VERSION_MAJOR}.${RUBY_VERSION_MINOR}.${RUBY_VERSION_PATCH}"
        "gem-${RUBY_VERSION_MAJOR}${RUBY_VERSION_MINOR}${RUBY_VERSION_PATCH}"
        "gem-${RUBY_VERSION_MAJOR}.${RUBY_VERSION_MINOR}.${RUBY_VERSION_PATCH}"
        "gem")

if(NOT GEM_EXECUTABLE)
	MESSAGE(FATAL_ERROR "Could not find the gem executable - install 'gem' first")
endif()

if(NOT Gem_FIND_COMPONENTS)
	MESSAGE(FATAL_ERROR "If searching for a Gem you have to provide COMPONENTS with the name of the gem")
endif()

set(GEM_FOUND TRUE)
foreach(Gem_NAME ${Gem_FIND_COMPONENTS})
        # If no gem version has been specified use the highest version found
	if(Gem_FIND_VERSION)
	 # TBD: Perform reg matching on hoe>=1.9 or similar to extract version if available
	endif(Gem_FIND_VERSION)

    # If the gem is installed as a gem
    if(NOT GEM_OS_PKG)
	    set(GEM_HOME ENV{GEM_HOME})

	    # Safe output of gem list --local into ${GEM_LOCAL_INFO}
	    EXECUTE_PROCESS(COMMAND ${GEM_EXECUTABLE} list --local OUTPUT_VARIABLE GEMS_LOCAL_INFO)

	    if("${GEMS_LOCAL_INFO}" STREQUAL "")
	    	MESSAGE(FATAL_ERROR "No local gem found. Check your GEM_HOME setting!")
	    else()
	    	STRING(REGEX MATCH "${Gem_NAME} \\(([0-9.]+)" GEM_INFO "${GEMS_LOCAL_INFO}")
	    	STRING(REGEX REPLACE ".* \\(([0-9.]+).*" "\\1" GEM_VERSION "${GEM_INFO}")
	    	MESSAGE(STATUS "found gem ${Gem_NAME} version: ${GEM_VERSION}")
	    endif()

	    if("${GEM_VERSION}" STREQUAL "")
	    	MESSAGE(FATAL_ERROR "No local gem found. Check your GEM_HOME / GEM_PATH setting!")
            break()
	    else()
                if(NOT "$ENV{GEM_HOME}" STREQUAL "")
                    list(APPEND GEM_SEARCH_PATH $ENV{GEM_HOME})
                endif()
                if(NOT "$ENV{GEM_PATH}" STREQUAL "")
                    string(REPLACE ":" ";" GEM_PATH "$ENV{GEM_PATH}")
                    list(APPEND GEM_SEARCH_PATH ${GEM_PATH})
                endif()

                foreach(gem_dir ${GEM_SEARCH_PATH})
                    set(gem_dir "${gem_dir}/gems/${Gem_NAME}-${GEM_VERSION}")
                    if (EXISTS "${gem_dir}")
                        set(GEM_INCLUDE_DIRS "${gem_dir}")
                        break()
                    endif()
                endforeach()
        endif()

	    set(_library_SEARCH_DIRS
	    		${GEM_INCLUDE_DIRS}
	    		${GEM_INCLUDE_DIRS}/lib
	    		${GEM_INCLUDE_DIRS}/${Gem_NAME}
	    )
    else(NOT GEM_OS_PKG)
        pkg_check_modules(GEM_PKG ${Gem_NAME})
        set(GEM_INCLUDE_DIRS ${GEM_PKG_INCLUDE_DIRS})
        set(GEM_LIBRARIES ${GEM_PKG_LIBRARIES} ${GEM_PKG_STATIC_LIBRARIES})
        list(APPEND GEM_LIBRARIES ${GEM_PKG_LDFLAGS} ${GEM_PKG_STATIC_LDFLAGS})
        list(APPEND GEM_LIBRARIES ${GEM_PKG_LDFLAGS_OTHER} ${GEM_PKG_STATIC_LDFLAGS_OTHER})

        if(Gem_DEBUG)
            message("GEM_OS_PKG is defined")
            message("GEM_INCLUDE_DIRS ${GEM_INCLUDE_DIRS}")
            message("GEM_STATIC_LIBRARY_DIRS ${GEM_PKG_STATIC_LIBRARY_DIRS}")
            message("GEM_LIBRARY_DIRS ${GEM_PKG_STATIC_LIBRARY_DIRS}")
            message("GEM_STATIC_LIBRARIES ${GEM_PKG_STATIC_LIBRARIES}")
            message("GEM_LIBRARIES ${GEM_PKG_LIBRARIES}")
        endif()
    endif()

	# Our heuristic to library names available for linking
	# since there is no real standard for where to name the
	# library
	set(_library_NAMES lib${Gem_NAME}.a
			   lib${Gem_NAME}.so
			   ${Gem_NAME}.a
			   ${Gem_NAME}.so
	)
	
	# Search for an existing library, but only within the gems folder
	foreach(_library_NAME ${_library_NAMES})
		foreach(_library_SEARCH_DIR ${_library_SEARCH_DIRS})
			
			find_file(GEM_LIBRARY ${_library_NAME}
					PATHS ${_library_SEARCH_DIR}
					NO_DEFAULT_PATH
			)

			if(Gem_DEBUG)
				message(STATUS "Searching ${_library_NAME} in ${_library_SEARCH_DIR}")
				message(STATUS " >> ${GEM_LIBRARY}")
			endif()
			
			if(NOT "${GEM_LIBRARY}" STREQUAL "GEM_LIBRARY-NOTFOUND")
				# Use the first library found
				if("${GEM_LIBRARIES}" STREQUAL "")
					list(APPEND GEM_LIBRARIES ${GEM_LIBRARIES} ${GEM_LIBRARY})
				endif()
			endif()
		endforeach()
	endforeach()
	if("${GEM_LIBRARIES}" STREQUAL "")
		set(GEM_FOUND FALSE)
	endif()

	if(Gem_DEBUG)
		message(STATUS "${Gem_NAME} library dir: ${GEM_LIBRARIES}")
		message(STATUS "${Gem_NAME} include dir: ${GEM_INCLUDE_DIRS}")
	endif()
		
	if(Gem_FIND_REQUIRED)
		MESSAGE(FATAL_ERROR "Gem: ${Gem_NAME} could not be found")
	endif()
endforeach()

